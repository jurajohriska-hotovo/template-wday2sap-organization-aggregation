<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:sap="http://www.mulesoft.org/schema/mule/sap" xmlns:workday="http://www.mulesoft.org/schema/mule/workday"
      xmlns:email="http://www.mulesoft.org/schema/mule/email" xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/workday http://www.mulesoft.org/schema/mule/workday/current/mule-workday.xsd
http://www.mulesoft.org/schema/mule/sap http://www.mulesoft.org/schema/mule/sap/current/mule-sap.xsd">
	<flow name="businesslogicFlow">
		<scatter-gather doc:name="Scatter-Gather">
            <route>
                 <ee:transform doc:name="Prepare Get Organizations request" doc:id="5ddb1536-1e04-4131-b020-a946b4d430b1" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
ns ns0 urn:com.workday/bsvc
---
{
	ns0#Get_Organizations_Request: {
		ns0#Request_Criteria: {
			ns0#Include_Inactive: false
		},
	}
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<workday:invoke doc:name="Get organizations from Workday" doc:id="b03873c0-535e-43f4-8db6-4975f5867403" config-ref="Workday_Config" service="Human_Resources" operation="Get_Organizations"/>
				<ee:transform doc:name="Transform Workday response" doc:id="f2114fbc-b82d-48ed-be3b-980252e6f446" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload.body.Get_Organizations_Response.Response_Data.*Organization.Organization_Data map {
	Name : $.Name,
	EndDate : $.Availibility_Date,
	Id : $.Reference_ID
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
            </route>
			<route >
				<ee:transform doc:name="Prepare SAP input" doc:id="eb385720-d436-45c6-ae1f-04eb0b4e88c4">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/xml
---
{
  "BAPI_PDOTYPES_GETDETAILEDLIST": {
    "import": {
      "PLANVERSION": "01",
      "OBJECTTYPE": "O"
    }
  }
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<sap:execute-synchronous-remote-function-call key="BAPI_PDOTYPES_GETDETAILEDLIST" doc:name="Query SAP organizations" doc:id="031ea85e-e69d-4a0d-ba4b-76ad874069a0" config-ref="SAP_Outbound"/>
				<ee:transform doc:name="Transform SAP Organizational Unit to Map of values" doc:id="cae35bd2-d5c3-4e2e-8424-aaaf22f1f30e" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload."BAPI_PDOTYPES_GETDETAILEDLIST".tables.OBJECTS.*row map {
	EndDate : $.END_DATE,
	Id : $.OBJECT_ID,
	Name : $.LONG_TEXT
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</route>
        
</scatter-gather>
<ee:transform doc:name="Aggregate results and transform to CSV" doc:id="fd27ba32-c22a-436c-8550-75136a9c04cf">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/csv separator=","
import mergeWith from dw::core::Objects
var organizationsFromWorkday = payload["0"].payload map (item) -> {
	"IDInWorkday": item.Id,
	"Name": item.Name,
	"EndDateInWorkday": item.EndDate
}
var organizationsFromSAP = payload["1"].payload map (item) -> {
	"IDInSAP": item.Id,
	"Name": item.Name,
	"EndDateInSAP": item.EndDate
}
var mergedItems =  (
                organizationsFromWorkday map ((item) -> item mergeWith ((organizationsFromSAP filter ($.Name == item.Name))[0]
                    default {IDInSAP: "", EndDateInSAP: ""}
                ))
            ) distinctBy $.Name
            ++ (
                organizationsFromSAP map ((item) -> item mergeWith ((organizationsFromWorkday filter ($.Name == item.Name))[0]
                    default {IDInWorkday: "", EndDateInWorkday: ""}
                ))
            ) distinctBy $.Name
fun sortBySourceExistence (items) = ((items map (item) -> (
        item ++ {
            sortValue:  if ((item.IDInWorkday != "") and (item.IDInSAP == "")) 1
                        else if ((item.IDInSAP != "") and (item.IDInWorkday == "")) 2
                        else 3
        }
    )
) orderBy $.sortValue ) map $ -"sortValue"
---
sortBySourceExistence(mergedItems) map (item) -> {
	"Name": item.Name,
	"IDInWorkday": item.IDInWorkday,
	"EndDateInWorkday": item.EndDateInWorkday,
	"IDInSAP": item.IDInSAP,
	"EndDateInSAP": item.EndDateInSAP
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
		<email:send config-ref="Gmail_SMTP" doc:name="Send migration result email" fromAddress="${mail.from}"
                    subject="${mail.subject}">
            <email:to-addresses>
                <email:to-address value="${mail.to}"/>
            </email:to-addresses>
            <email:body contentType="text/plain">
                <email:content><![CDATA[${mail.body}]]></email:content>
            </email:body>
            <email:attachments><![CDATA[#[{'${attachment.name}' : payload}]]]></email:attachments>

        </email:send>
    </flow>
    <flow name="mainFlow">
        <flow-ref doc:name="Call businesslogicFlow" name="businesslogicFlow"/>
        <error-handler>
            <on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" type="ANY">
                <flow-ref doc:name="errorHandlingFlow" name="errorHandlingFlow"/>
            </on-error-propagate>
        </error-handler>
    </flow>

</mule>

        