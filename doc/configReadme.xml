<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Workday and SAP Organization Aggregation</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a SAP admin I want to aggregate Organizations from Workday and from SAP and compare them to see which organizations can only be found in one of the two and which organizations are in both instances. 

For practical purposes this Template will generate the result in the format of a CSV Report sent by mail.

This Template should serve as a foundation for extracting data from two systems, aggregating data, comparing values of fields for the objects, and generating a report on the differences. 

As implemented, it gets organizations from Workday and from SAP, compares by the name of the organizations, generates a CSV file which shows organizations in Workday and in SAP. The report is then emailed to a configured group of email addresses.
		</section>
		<section id="considerations">
		<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made in order for all to run smoothly.
**Failling to do so could lead to unexpected behavior of the template.**
Before continue with the use of this Anypoint Template, you may want to check out this [Documentation Page](http://www.mulesoft.org/documentation/display/current/SAP+Connector#SAPConnector-EnablingYourStudioProjectforSAP), that will teach you how to work 
with SAP and Anypoint Studio.
## Disclaimer
This Anypoint template uses a few private Maven dependencies in oder to work. If you intend to run this template with Maven support, please continue reading.
You will find that there are three dependencies in the pom.xml file that begin with the following group id: 
	**com.sap.conn.jco** 
These dependencies are private for Mulesoft and will cause you application not to build from a Maven command line. You need to replace them with "provided" scope and copy the libraries into the build path.
		]]>
		</section>
		<section id="wday_src">
<![CDATA[
The Workday connector currently does not support autopaging functionality out of the box so number of processed objects are limited to the connector's single page size.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
Once your app is all set and started, supposing you choose as domain name `workdayorganizationsaggregation` to trigger the use case you just need to hit `http://workdayorganizationsaggregation.cloudhub.io/generatereport` and the report will be sent to the emails configured.

]]>
		</section>
		<section id="default_running_on_premise">
<![CDATA[
Complete all properties in one of the property files, for example in [mule.prod.properties] (../blob/master/src/main/resources/mule.prod.properties) and run your app with the corresponding environment variable to use it. To follow the example, this will be `mule.env=prod`.

After this, to trigger the use case you just need to hit the local http endpoint with the port you configured in your file. If this is, for instance, `9090` then you should hit: `http://localhost:9090/generatereport` and this will create a CSV report and send it to the mails set.
]]>
		</section>
		<section id="api_calls">
			<![CDATA[&#160;]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
+ http.port `9090` 

#### Workday Connector configuration
+ wday.user `bob.dylan@orga`
+ wday.password `DylanPassword123`
+ wday.endpoint `http://localhost:8080/ccx/service/company_pt1/Human_Resources/v23.1`

### SAP Connector configuration
+ sap.jco.ashost `your.sap.address.com`
+ sap.jco.user `SAP_USER`
+ sap.jco.passwd `SAP_PASS`
+ sap.jco.sysnr `14`
+ sap.jco.client `800`
+ sap.jco.lang `EN`

#### SMTP Services configuration
+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `exampleuser@gmail.com`
+ smtp.password `ExamplePassword456`

#### Mail details
+ mail.from `exampleuser@gmail.com`
+ mail.to `woody.guthrie@gmail.com`
+ mail.subject `Organization Report`
+ mail.body `Please find attached your Organization Report`
+ attachment.name `OrganizationsReport.csv`
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is the file where you will found the inbound and outbound sides of your integration app.
This Template has a [HTTP Listener Connector](http://www.mulesoft.org/documentation/display/current/HTTP+Listener+Connector) as the way to trigger the use case and an [SMTP Transport](http://www.mulesoft.org/documentation/display/current/SMTP+Transport+Reference) as the outbound way to send the report.

$H$H# Trigger Flow
**HTTP Listener Connector** - Start Report Generation

+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `0.0.0.0`. CloudHub will then route requests from your application domain URL to the endpoint.

$H$H# Outbound Flow
**SMTP Outbound Endpoint** - Send Mail

+ Both SMTP Server configuration and the actual mail to be sent are defined in this endpoint.
+ This flow is going to be invoked from the flow that does all the functional work: *mainFlow*, the same that is invoked from the Inbound Flow upon triggering of the HTTP Endpoint.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the Template is implemented on this XML, directed by one flow responsible of conducting the aggregation of data, comparing records and finally formating the output, in this case being a report.
The *mainFlow* organises the job in three different steps and finally invokes the *outboundFlow* that will deliver the report to the corresponding outbound endpoint.
This flow has Exception Strategy that basically consists on invoking the *defaultChoiseExceptionStrategy* defined in *errorHandling.xml* file.

$H$H# Gather Data Flow
[Scatter Gather](http://www.mulesoft.org/documentation/display/current/Scatter-Gather) is responsible for aggregating the results from SAP and Workday.
Criteria and format applied:

+ Scatter Gather component implements an aggregation strategy where data loaded from both Workday and SAP and aggregated to the List of Maps with keys: **Name**, **IdInWorkday**, **IdInSap**, **AvailibilityDateInWorkday** and **EndDateInSap**.
+ Organizations will be matched by name, that is to say, an organization in Workday and SAP with the same name is considered the same organization.

$H$H# sapRetrievalMapperFlow
Organizations are loaded by [SAP connector](http://www.mulesoft.org/documentation/display/current/SAP+Connector) to List of Maps with keys: **Id**, **Name** and **EndDate**

$H$H# workdayRetrievalMapperFlow
Organizations are loaded by [Workday connector](http://www.mulesoft.org/documentation/display/current/Workday+Connector) to List of Maps with keys: **Id**, **Name** and **EndDate**

$H$H# Format Output Flow
[Java Transformer](http://www.mulesoft.org/documentation/display/current/Java+Transformer+Reference) responsible for sorting the list of organizations in the following order:

1. Organizations only in Workday
2. Organizations only in SAP
3. Organizations in both Workday and SAP

All records ordered alphabetically by name within each category.
If you want to change this order then the *compare* method should be modified.

+ CSV Report [DataWeave](http://developer.mulesoft.com/docs/dataweave) transforming the List of Maps in CSV with headers **Name**, **ID in Workday**, **Availibility Date in Workday**, **ID in SAP**  and **End Date in SAP**.
+ An [Object to string transformer](http://www.mulesoft.org/documentation/display/current/Transformers) is used to set the payload as an String. 
]]>
		</section>
	</sections>
</configuration>